function [ m_beta, sem_beta, sd_beta, pval, R2_glm ] = MS2_RL_RT_ter(model_n, SV_formula)
% [ m_beta, sem_beta, sd_beta, pval, R2_glm ] = MS2_RL_RT_ter(model_n, SV_formula)
% MS2_RL_RT_ter will compute correlation between reaction time and different
% variables of interest in the task based on the model defined in the
% input.
%
% MS2_RL_RT_ter requires group_onsets_for_fMRI_MS2.m to have been launched
% before being able to be used.
%
% INPUTS
% model_n: RL model number to use to extract Val and Conf
%
% SV_formula: use QA+QB ('qAqB') or pA*QA+pB*QB ('pAqApBqB')
%
% OUTPUTS
% beta: structure with data for each pair type and each subject
%
% m_beta: structure with average betas for each correlation
%
% sem_beta: like m_beta but SEM instead of average
%
% pval: structure with corresponding p.Values
%
% R2_glm: R2 for each subject

%% working directory
root = 'define path here';
saveFolder = [fullfile(root,'behavior_summary','RL_model'), filesep];

%% subject identification
subject_id = {'enter list of subjects here'};
NS = length(subject_id);

%% main parameters
n_RL_runs = 3;
n_GL_trials_perRun = 24;
n_NP_trials_perRun = 12;
n_bins = 8;
[RT.GP.perSub,...
    RT.LP.perSub,...
    run1_cstt.GP.perSub,...
    run1_cstt.LP.perSub,...
    run2_cstt.GP.perSub,...
    run2_cstt.LP.perSub,...
    run3_cstt.GP.perSub,...
    run3_cstt.LP.perSub,...
    trialN.GP.perSub,...
    trialN.LP.perSub,...
    SV.GP.perSub,...
    SV.LP.perSub,...
    Conf.GP.perSub,...
    Conf.LP.perSub,...
    pChoiceLeft.GP.perSub,...
    pChoiceLeft.LP.perSub,...
    dQ_LR.GP.perSub,...
    dQ_LR.LP.perSub] = deal( NaN(n_RL_runs*n_GL_trials_perRun, NS) );
[RT.NP.perSub,...
    run1_cstt.NP.perSub,...
    run2_cstt.NP.perSub,...
    run3_cstt.NP.perSub,...
    trialN.NP.perSub] = deal(NaN(n_RL_runs*n_NP_trials_perRun, NS));
[RT.GLP.perSub,...
    run1_cstt.GLP.perSub,...
    run2_cstt.GLP.perSub,...
    run3_cstt.GLP.perSub,...
    cstt_GL.GLP.perSub,...
    trialN.GLP.perSub,...
    SV.GLP.perSub,...
    Conf.GLP.perSub,...
    pChoiceLeft.GLP.perSub,...
    dQ_LR.GLP.perSub] = deal(NaN(n_RL_runs*n_GL_trials_perRun*2, NS));

[RT_bins.GP.SV.perSub,...
    RT_bins.GP.conf.perSub,...
    RT_bins.GP.pChoiceLeft.perSub,...
    RT_bins.GP.dQ_LR.perSub,...
    RT_bins.GP.trialN.perSub,...
    conf_bins.GP.dQ_LR.perSub,...
    RT_bins.LP.SV.perSub,...
    RT_bins.LP.conf.perSub,...
    RT_bins.LP.pChoiceLeft.perSub,...
    RT_bins.LP.dQ_LR.perSub,...
    RT_bins.LP.trialN.perSub,...
    conf_bins.LP.dQ_LR.perSub,...
    fit_RT_bins.GP.SV.perSub,...
    fit_RT_bins.GP.conf.perSub,...
    fit_RT_bins.GP.pChoiceLeft.perSub,...
    fit_RT_bins.GP.dQ_LR.perSub,...
    fit_RT_bins.GP.trialN.perSub,...
    fit_RT_bins.LP.SV.perSub,...
    fit_RT_bins.LP.conf.perSub,...
    fit_RT_bins.LP.pChoiceLeft.perSub,...
    fit_RT_bins.LP.dQ_LR.perSub,...
    fit_RT_bins.LP.trialN.perSub,...
    SV_bins.GP.SV.perSub,...
    conf_bins.GP.conf.perSub,...
    pChoiceLeft_centered_bins.GP.pChoiceLeft.perSub,...
    dQ_LR_bins.GP.dQ_LR.perSub,...
    SV_bins.LP.SV.perSub,...
    conf_bins.LP.conf.perSub,...
    pChoiceLeft_centered_bins.LP.pChoiceLeft.perSub,...
    dQ_LR_bins.LP.dQ_LR.perSub,...
    trialN_bins.LP.trialN.perSub] = deal( NaN(n_bins, NS));
[RT_bins.GLP.SV.perSub,...
    RT_bins.GLP.conf.perSub,...
    RT_bins.GLP.pChoiceLeft.perSub,...
    RT_bins.GLP.dQ_LR.perSub,...
    RT_bins.GLP.trialN.perSub,...
    conf_bins.GLP.dQ_LR.perSub,...
    conf_bins.GLP.trialN.perSub,...
    fit_RT_bins.GLP.SV.perSub,...
    fit_RT_bins.GLP.conf.perSub,...
    fit_RT_bins.GLP.pChoiceLeft.perSub,...
    fit_RT_bins.GLP.dQ_LR.perSub,...
    fit_RT_bins.GLP.trialN.perSub,...
    SV_bins.GLP.SV.perSub,...
    conf_bins.GLP.conf.perSub,...
    pChoiceLeft_centered_bins.GLP.pChoiceLeft.perSub,...
    dQ_LR_bins.GLP.dQ_LR.perSub,...
    trialN_bins.GLP.trialN.perSub] = deal(NaN(n_bins,NS));
RT_GorL_var_nm = {'run1_cstt','run2_cstt','run3_cstt',...
    'SV','Conf'};
for iVar = 1:length(RT_GorL_var_nm)
    reg_nm = RT_GorL_var_nm{iVar};
    [beta.GP.(reg_nm),...
        beta.LP.(reg_nm)] = deal( NaN(1,NS));
end
RT_NP_var_nm = {'run1_cstt','run2_cstt','run3_cstt'};
for iVar = 1:length(RT_NP_var_nm)
    reg_nm = RT_NP_var_nm{iVar};
    beta.NP.(reg_nm) = NaN(1,NS);
end

RT_GandL_var_nm = {'run1_cstt','run2_cstt','run3_cstt',...
    'SV','Conf'}; % ,'trialN','cstt_G_vs_L',
% RT_GandL_var_nm = {'run1_cstt','run2_cstt','run3_cstt',...
%     'trialN'}; % 'cstt_G_vs_L',
for iVar_bis = 1:length(RT_GandL_var_nm)
    reg_nm_GL = RT_GandL_var_nm{iVar_bis};
    [beta.GLP.DT.(reg_nm_GL),...
        beta.GLP.Val.(reg_nm_GL),...
        beta.GLP.Conf.(reg_nm_GL)] = deal(NaN(1,NS));
end

R2_glm = NaN(1,NS);

%% subject loop
for iS = 1:NS

    % subject identification
    sub_nm = subject_id{iS};
    if strcmp(sub_nm(3),'_')
        subid   = sub_nm(2);
    elseif strcmp(sub_nm(3),'_') == 0 && strcmp(sub_nm(4),'_')
        subid   = sub_nm(2:3);
    end
    % subject working directories
    sub_folder      = [root filesep sub_nm filesep];
    onsets_folder = [sub_folder 'fMRI_analysis' filesep];
    RL_runs_idx = MS2_task_runs_extraction('RL',sub_nm);

    %% run loop
    for iRun = 1:n_RL_runs
        run_nm = num2str(RL_runs_idx(iRun));
        %% load data
        onsets_file = [onsets_folder,'onsets_sub',subid,'_learning_run',run_nm,'.mat'];
        if exist(onsets_file,'file')
            load_onsetStruct = getfield(load(onsets_file),'learn');
        else
            error(['Please launch group_onsets_for_fMRI_MS2.m before this function ',...
                'because ',onsets_file,' could not be found.']);
        end

        %% gain pair
        % extrac trial index
        trialN_GP_tmp = load_onsetStruct.mod.trialN.raw.gainPair.main;
        trialN_GP_tmp_bis = (1:length(trialN_GP_tmp)) + n_GL_trials_perRun*(iRun - 1);
        % extract constant
        switch iRun
            case 1
                run1_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = ones(length(trialN_GP_tmp),1);
                run2_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = zeros(length(trialN_GP_tmp),1);
                run3_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = zeros(length(trialN_GP_tmp),1);
            case 2
                run1_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = zeros(length(trialN_GP_tmp),1);
                run2_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = ones(length(trialN_GP_tmp),1);
                run3_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = zeros(length(trialN_GP_tmp),1);
            case 3
                run1_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = zeros(length(trialN_GP_tmp),1);
                run2_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = zeros(length(trialN_GP_tmp),1);
                run3_cstt.GP.perSub(trialN_GP_tmp_bis, iS) = ones(length(trialN_GP_tmp),1);
        end
        trialN.GP.perSub(trialN_GP_tmp_bis, iS) = trialN_GP_tmp;
        % RT
        RT.GP.perSub(trialN_GP_tmp_bis, iS) = load_onsetStruct.mod.RT_fp.gainPair.main.raw;
        % value and confidence
        pChoiceLeft.GP.perSub(trialN_GP_tmp_bis,iS) = load_onsetStruct.mod.Q_model(model_n).raw.pChoice.left.gainPair.gainPairTrials;
        Conf.GP.perSub( trialN_GP_tmp_bis, iS) = ((pChoiceLeft.GP.perSub(trialN_GP_tmp_bis,iS) - 0.5).^2)./0.25;
        switch SV_formula
            case 'qAqB'
                SV.GP.perSub(trialN_GP_tmp_bis, iS) =...
                    load_onsetStruct.mod.Q_model(model_n).raw.gainPair.gainPairTrials.bestItem +...
                    load_onsetStruct.mod.Q_model(model_n).raw.gainPair.gainPairTrials.worseItem;
            case 'pAqApBqB'
                SV.GP.perSub(trialN_GP_tmp_bis, iS) =...
                    load_onsetStruct.mod.Q_model(model_n).raw.SV.gainPair.gainPairTrials;
        end
        dQ_LR.GP.perSub(trialN_GP_tmp_bis, iS) = load_onsetStruct.mod.Q_model(model_n).raw.dQ_LR.gainPair.gainPairTrials;

        %% loss pair
        % extrac trial index
        trialN_LP_tmp = load_onsetStruct.mod.trialN.raw.lossPair.main;
        trialN_LP_tmp_bis = (1:length(trialN_LP_tmp)) + n_GL_trials_perRun*(iRun - 1);
        % extract constant
        switch iRun
            case 1
                run1_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = ones(length(trialN_LP_tmp),1);
                run2_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = zeros(length(trialN_LP_tmp),1);
                run3_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = zeros(length(trialN_LP_tmp),1);
            case 2
                run1_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = zeros(length(trialN_LP_tmp),1);
                run2_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = ones(length(trialN_LP_tmp),1);
                run3_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = zeros(length(trialN_LP_tmp),1);
            case 3
                run1_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = zeros(length(trialN_LP_tmp),1);
                run2_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = zeros(length(trialN_LP_tmp),1);
                run3_cstt.LP.perSub(trialN_LP_tmp_bis, iS) = ones(length(trialN_LP_tmp),1);
        end
        trialN.LP.perSub(trialN_LP_tmp_bis, iS) = trialN_LP_tmp;
        % RT
        RT.LP.perSub(trialN_LP_tmp_bis, iS) = load_onsetStruct.mod.RT_fp.lossPair.main.raw;
        % value and confidence
        pChoiceLeft.LP.perSub(trialN_LP_tmp_bis,iS) = load_onsetStruct.mod.Q_model(model_n).raw.pChoice.left.lossPair.lossPairTrials;
        Conf.LP.perSub( trialN_LP_tmp_bis, iS) = ((pChoiceLeft.LP.perSub(trialN_LP_tmp_bis,iS) - 0.5).^2)./0.25;
        switch SV_formula
            case 'qAqB'
                SV.LP.perSub(trialN_LP_tmp_bis, iS) =...
                    load_onsetStruct.mod.Q_model(model_n).raw.lossPair.lossPairTrials.bestItem +...
                    load_onsetStruct.mod.Q_model(model_n).raw.lossPair.lossPairTrials.worseItem;
            case 'pAqApBqB'
                SV.LP.perSub(trialN_LP_tmp_bis, iS) =...
                    load_onsetStruct.mod.Q_model(model_n).raw.SV.lossPair.lossPairTrials;
        end
        dQ_LR.LP.perSub(trialN_LP_tmp_bis, iS) = load_onsetStruct.mod.Q_model(model_n).raw.dQ_LR.lossPair.lossPairTrials;

        %% gain+loss pair
        % extrac trial index
        trialN_GLP_tmp = load_onsetStruct.mod.trialN.raw.GL_Pairs.main;
        trialN_GLP_tmp_bis = (1:length(trialN_GLP_tmp)) + n_GL_trials_perRun*2*(iRun - 1);
        % extract constant
        switch iRun
            case 1
                run1_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = ones(length(trialN_GLP_tmp),1);
                run2_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = zeros(length(trialN_GLP_tmp),1);
                run3_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = zeros(length(trialN_GLP_tmp),1);
            case 2
                run1_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = zeros(length(trialN_GLP_tmp),1);
                run2_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = ones(length(trialN_GLP_tmp),1);
                run3_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = zeros(length(trialN_GLP_tmp),1);
            case 3
                run1_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = zeros(length(trialN_GLP_tmp),1);
                run2_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = zeros(length(trialN_GLP_tmp),1);
                run3_cstt.GLP.perSub(trialN_GLP_tmp_bis, iS) = ones(length(trialN_GLP_tmp),1);
        end
        % constant gain vs loss pair type
        pair_type = load_onsetStruct.mod.valence.raw.GL_Pairs.main;
        pair_type(pair_type == -1) = 0; % transform into binary variable
        cstt_GL.GLP.perSub(trialN_GLP_tmp_bis, iS) = pair_type;
        % trial number
        trialN.GLP.perSub(trialN_GLP_tmp_bis, iS) = trialN_GLP_tmp;
        % RT
        RT.GLP.perSub(trialN_GLP_tmp_bis, iS) = load_onsetStruct.mod.RT_fp.GL_Pairs.main.raw;
        % value and confidence
        pChoiceLeft.GLP.perSub(trialN_GLP_tmp_bis,iS) = load_onsetStruct.mod.Q_model(model_n).raw.pChoice.left.GL_Pairs.GL_PairsTrials;
        Conf.GLP.perSub( trialN_GLP_tmp_bis, iS) = ((pChoiceLeft.GLP.perSub(trialN_GLP_tmp_bis,iS) - 0.5).^2)./0.25;
        switch SV_formula
            case 'qAqB'
                SV.GLP.perSub(trialN_GLP_tmp_bis, iS) =...
                    load_onsetStruct.mod.Q_model(model_n).raw.GL_Pairs.GL_PairsTrials.bestItem +...
                    load_onsetStruct.mod.Q_model(model_n).raw.GL_Pairs.GL_PairsTrials.worseItem;
            case 'pAqApBqB'
                SV.GLP.perSub(trialN_GLP_tmp_bis, iS) =...
                    load_onsetStruct.mod.Q_model(model_n).raw.SV.GL_Pairs.GL_PairsTrials;
        end
        dQ_LR.GLP.perSub(trialN_GLP_tmp_bis, iS) = load_onsetStruct.mod.Q_model(model_n).raw.dQ_LR.GL_Pairs.GL_PairsTrials;

        %% neutral pair
        % extrac trial index
        trialN_NP_tmp = load_onsetStruct.mod.trialN.raw.ntalPair.main;
        trialN_NP_tmp_bis = (1:length(trialN_NP_tmp)) + n_NP_trials_perRun*(iRun - 1);
        % extract constant
        switch iRun
            case 1
                run1_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = ones(length(trialN_NP_tmp),1);
                run2_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = zeros(length(trialN_NP_tmp),1);
                run3_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = zeros(length(trialN_NP_tmp),1);
            case 2
                run1_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = zeros(length(trialN_NP_tmp),1);
                run2_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = ones(length(trialN_NP_tmp),1);
                run3_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = zeros(length(trialN_NP_tmp),1);
            case 3
                run1_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = zeros(length(trialN_NP_tmp),1);
                run2_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = zeros(length(trialN_NP_tmp),1);
                run3_cstt.NP.perSub(trialN_NP_tmp_bis, iS) = ones(length(trialN_NP_tmp),1);
        end
        trialN.NP.perSub(trialN_NP_tmp_bis, iS) = trialN_NP_tmp;
        % RT
        RT.NP.perSub(trialN_NP_tmp_bis, iS) = load_onsetStruct.mod.RT_fp.ntalPair.main.raw;

    end % run loop

    %% zscore vars across runs per subject
    % confidence
    %     conf.GP.perSub(:,iS) = nanzscore( conf.GP.perSub(:,iS) );
    %     conf.LP.perSub(:,iS) = nanzscore( conf.LP.perSub(:,iS) );
    %     conf.GLP.perSub(:,iS) = nanzscore( conf.GLP.perSub(:,iS) );

    % SV
    %     SV.GP.perSub(:,iS) = nanzscore( SV.GP.perSub(:,iS) );
    %     SV.LP.perSub(:,iS) = nanzscore( SV.LP.perSub(:,iS) );
    %     SV.GLP.perSub(:,iS) = nanzscore( SV.GLP.perSub(:,iS) );

    % dQ
    %     dQ_LR.GP.perSub(:,iS) = nanzscore( dQ_LR.GP.perSub(:,iS) );
    %     dQ_LR.LP.perSub(:,iS) = nanzscore( dQ_LR.LP.perSub(:,iS) );
    %     dQ_LR.GLP.perSub(:,iS) = nanzscore( dQ_LR.GLP.perSub(:,iS) );

    %% GLM per subject
    % gain pair
    x_GLM_GP = [run1_cstt.GP.perSub(:,iS),...
        run2_cstt.GP.perSub(:,iS),...
        run3_cstt.GP.perSub(:,iS),...
        SV.GP.perSub(:,iS),...
        Conf.GP.perSub(:,iS)];
    yRT_GP = RT.GP.perSub(:,iS);
    betas_GP_tmp = glmfit(x_GLM_GP, yRT_GP, 'normal','constant','off');
    for iB = 1:length(RT_GorL_var_nm)
        reg_nm = RT_GorL_var_nm{iB};
        beta.GP.(reg_nm)(iS) = betas_GP_tmp(iB);
    end % beta loop
    RTfit_GP_tmp = glmval(betas_GP_tmp, x_GLM_GP, 'identity','constant','off');

    % loss pair
    x_GLM_LP = [run1_cstt.LP.perSub(:,iS),...
        run2_cstt.LP.perSub(:,iS),...
        run3_cstt.LP.perSub(:,iS),...
        SV.LP.perSub(:,iS),...
        Conf.LP.perSub(:,iS)];
    yRT_LP = RT.LP.perSub(:,iS);
    betas_LP_tmp = glmfit(x_GLM_LP, yRT_LP, 'normal','constant','off');
    for iB = 1:length(RT_GorL_var_nm)
        reg_nm = RT_GorL_var_nm{iB};
        beta.LP.(reg_nm)(iS) = betas_LP_tmp(iB);
    end % beta loop
    RTfit_LP_tmp = glmval(betas_LP_tmp, x_GLM_LP, 'identity','constant','off');

    % neutral pair
    x_GLM_NP = [run1_cstt.NP.perSub(:,iS),...
        run2_cstt.NP.perSub(:,iS),...
        run3_cstt.NP.perSub(:,iS)];
    yRT_NP = RT.NP.perSub(:,iS);
    betas_NP_tmp = glmfit(x_GLM_NP, yRT_NP, 'normal','constant','off');
    for iB = 1:length(RT_NP_var_nm)
        reg_nm = RT_NP_var_nm{iB};
        beta.NP.(reg_nm)(iS) = betas_NP_tmp(iB);
    end % beta loop
    % RTfit_NP_tmp = glmval(betas_NP_tmp, x_GLM_NP, 'identity','constant','off');

    % gain+loss pair
    x_GLM_GLP = [run1_cstt.GLP.perSub(:,iS),...
        run2_cstt.GLP.perSub(:,iS),...
        run3_cstt.GLP.perSub(:,iS),...
        SV.GLP.perSub(:,iS),...
        Conf.GLP.perSub(:,iS)];%,...
    %         trialN.GLP.perSub(:,iS)];
    %     x_GLM_GLP = [run1_cstt.GLP.perSub(:,iS),...
    %         run2_cstt.GLP.perSub(:,iS),...
    %         run3_cstt.GLP.perSub(:,iS),...
    %         trialN.GLP.perSub(:,iS)];
    %         cstt_GL.GLP.perSub(:,iS),...
    yRT_GLP = RT.GLP.perSub(:,iS);
    betas_GLP_tmp = glmfit(x_GLM_GLP, yRT_GLP, 'normal','constant','off');
    for iB = 1:length(RT_GandL_var_nm)
        reg_nm = RT_GandL_var_nm{iB};
        beta.GLP.DT.(reg_nm)(iS) = betas_GLP_tmp(iB);
    end % beta loop
    RTfit_GLP_tmp = glmval(betas_GLP_tmp, x_GLM_GLP, 'identity','constant','off');
    % extract R2
    ok_trials = ~isnan(RTfit_GLP_tmp.*yRT_GLP);
    r_tmp = corr(RTfit_GLP_tmp(ok_trials), yRT_GLP(ok_trials));
    R2_glm(iS) = r_tmp.^2;

    % Val = f(TrialN)
    betas_GLP_SV_tmp = glmfit(x_GLM_GLP, SV.GLP.perSub(:,iS), 'normal','constant','off');
    for iB = 1:length(RT_GandL_var_nm)
        reg_nm = RT_GandL_var_nm{iB};
        beta.GLP.Val.(reg_nm)(iS) = betas_GLP_SV_tmp(iB);
    end % beta loop

    % Conf = f(TrialN)
    betas_GLP_Conf_tmp = glmfit(x_GLM_GLP, Conf.GLP.perSub(:,iS), 'normal','constant','off');
    for iB = 1:length(RT_GandL_var_nm)
        reg_nm = RT_GandL_var_nm{iB};
        beta.GLP.Conf.(reg_nm)(iS) = betas_GLP_Conf_tmp(iB);
    end % beta loop

    %% create bins for SV and conf
    % gain pair
    % SV
    [RT_bins.GP.SV.perSub(:,iS),...
        SV_bins.GP.SV.perSub(:,iS)] = do_bin2(yRT_GP,...
        SV.GP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GP.SV.perSub(:,iS),...
        SV_bins.GP.SV.perSub(:,iS)] = do_bin2(RTfit_GP_tmp,...
        SV.GP.perSub(:,iS),...
        n_bins, 0);
    % confidence
    [RT_bins.GP.conf.perSub(:,iS),...
        conf_bins.GP.conf.perSub(:,iS)] = do_bin2(yRT_GP,...
        Conf.GP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GP.conf.perSub(:,iS),...
        conf_bins.GP.conf.perSub(:,iS)] = do_bin2(RTfit_GP_tmp,...
        Conf.GP.perSub(:,iS),...
        n_bins, 0);
    % p(choice = left) centered
    [RT_bins.GP.pChoiceLeft.perSub(:,iS),...
        pChoiceLeft_centered_bins.GP.pChoiceLeft.perSub(:,iS)] = do_bin2(yRT_GP,...
        (pChoiceLeft.GP.perSub(:,iS) - 0.5),...
        n_bins, 0);
    [fit_RT_bins.GP.pChoiceLeft.perSub(:,iS),...
        pChoiceLeft_centered_bins.GP.pChoiceLeft.perSub(:,iS)] = do_bin2(RTfit_GP_tmp,...
        (pChoiceLeft.GP.perSub(:,iS) - 0.5),...
        n_bins, 0);
    % dQ
    [RT_bins.GP.dQ_LR.perSub(:,iS),...
        dQ_LR_bins.GP.dQ_LR.perSub(:,iS)] = do_bin2(yRT_GP,...
        dQ_LR.GP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GP.dQ_LR.perSub(:,iS),...
        dQ_LR_bins.GP.dQ_LR.perSub(:,iS)] = do_bin2(RTfit_GP_tmp,...
        dQ_LR.GP.perSub(:,iS),...
        n_bins, 0);
    [conf_bins.GP.dQ_LR.perSub(:,iS)] = do_bin2(Conf.GP.perSub(:, iS),...
        dQ_LR.GP.perSub(:,iS),...
        n_bins, 0);
    % trial number
    [RT_bins.GP.trialN.perSub(:,iS),...
        trialN_bins.GP.trialN.perSub(:,iS)] = do_bin2(yRT_GP,...
        trialN.GP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GP.trialN.perSub(:,iS),...
        trialN_bins.GP.trialN.perSub(:,iS)] = do_bin2(RTfit_GP_tmp,...
        trialN.GP.perSub(:,iS),...
        n_bins, 0);
    [conf_bins.GP.trialN.perSub(:,iS)] = do_bin2(Conf.GP.perSub(:, iS),...
        trialN.GP.perSub(:,iS),...
        n_bins, 0);

    % loss pair
    % SV
    [RT_bins.LP.SV.perSub(:,iS),...
        SV_bins.LP.SV.perSub(:,iS)] = do_bin2(yRT_LP,...
        SV.LP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.LP.SV.perSub(:,iS),...
        SV_bins.LP.SV.perSub(:,iS)] = do_bin2(RTfit_LP_tmp,...
        SV.LP.perSub(:,iS),...
        n_bins, 0);
    % confidence
    [RT_bins.LP.conf.perSub(:,iS),...
        conf_bins.LP.conf.perSub(:,iS)] = do_bin2(yRT_LP,...
        Conf.LP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.LP.conf.perSub(:,iS),...
        conf_bins.LP.conf.perSub(:,iS)] = do_bin2(RTfit_LP_tmp,...
        Conf.LP.perSub(:,iS),...
        n_bins, 0);
    % p(choice = left) centered
    [RT_bins.LP.pChoiceLeft.perSub(:,iS),...
        pChoiceLeft_centered_bins.LP.pChoiceLeft.perSub(:,iS)] = do_bin2(yRT_LP,...
        (pChoiceLeft.LP.perSub(:,iS) - 0.5),...
        n_bins, 0);
    [fit_RT_bins.LP.pChoiceLeft.perSub(:,iS),...
        pChoiceLeft_centered_bins.LP.pChoiceLeft.perSub(:,iS)] = do_bin2(RTfit_LP_tmp,...
        (pChoiceLeft.LP.perSub(:,iS) - 0.5),...
        n_bins, 0);
    % dQ
    [RT_bins.LP.dQ_LR.perSub(:,iS),...
        dQ_LR_bins.LP.conf.perSub(:,iS)] = do_bin2(yRT_LP,...
        dQ_LR.LP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.LP.dQ_LR.perSub(:,iS),...
        dQ_LR_bins.LP.dQ_LR.perSub(:,iS)] = do_bin2(RTfit_LP_tmp,...
        dQ_LR.LP.perSub(:,iS),...
        n_bins, 0);
    [conf_bins.LP.dQ_LR.perSub(:,iS)] = do_bin2(Conf.LP.perSub(:, iS),...
        dQ_LR.LP.perSub(:,iS),...
        n_bins, 0);
    % trial number
    [RT_bins.LP.trialN.perSub(:,iS),...
        trialN_bins.LP.conf.perSub(:,iS)] = do_bin2(yRT_LP,...
        trialN.LP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.LP.trialN.perSub(:,iS),...
        trialN_bins.LP.trialN.perSub(:,iS)] = do_bin2(RTfit_LP_tmp,...
        trialN.LP.perSub(:,iS),...
        n_bins, 0);
    [conf_bins.LP.trialN.perSub(:,iS)] = do_bin2(Conf.LP.perSub(:, iS),...
        trialN.LP.perSub(:,iS),...
        n_bins, 0);

    % gain+loss pair
    % SV
    [RT_bins.GLP.SV.perSub(:,iS),...
        SV_bins.GLP.SV.perSub(:,iS)] = do_bin2(yRT_GLP,...
        SV.GLP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GLP.SV.perSub(:,iS),...
        SV_bins.GLP.SV.perSub(:,iS)] = do_bin2(RTfit_GLP_tmp,...
        SV.GLP.perSub(:,iS),...
        n_bins, 0);
    % confidence
    [RT_bins.GLP.conf.perSub(:,iS),...
        conf_bins.GLP.conf.perSub(:,iS)] = do_bin2(yRT_GLP,...
        Conf.GLP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GLP.conf.perSub(:,iS),...
        conf_bins.GLP.conf.perSub(:,iS)] = do_bin2(RTfit_GLP_tmp,...
        Conf.GLP.perSub(:,iS),...
        n_bins, 0);
    % p(choice = left) centered
    [RT_bins.GLP.pChoiceLeft.perSub(:,iS),...
        pChoiceLeft_centered_bins.GLP.pChoiceLeft.perSub(:,iS)] = do_bin2(yRT_GLP,...
        (pChoiceLeft.GLP.perSub(:,iS) - 0.5),...
        n_bins, 0);
    [fit_RT_bins.GLP.pChoiceLeft.perSub(:,iS),...
        pChoiceLeft_centered_bins.GLP.pChoiceLeft.perSub(:,iS)] = do_bin2(RTfit_GLP_tmp,...
        (pChoiceLeft.GLP.perSub(:,iS) - 0.5),...
        n_bins, 0);
    % dQ
    [RT_bins.GLP.dQ_LR.perSub(:,iS),...
        dQ_LR_bins.GLP.conf.perSub(:,iS)] = do_bin2(yRT_GLP,...
        dQ_LR.GLP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GLP.dQ_LR.perSub(:,iS),...
        dQ_LR_bins.GLP.dQ_LR.perSub(:,iS)] = do_bin2(RTfit_GLP_tmp,...
        dQ_LR.GLP.perSub(:,iS),...
        n_bins, 0);
    [conf_bins.GLP.dQ_LR.perSub(:,iS)] = do_bin2(Conf.GLP.perSub(:, iS),...
        dQ_LR.GLP.perSub(:,iS),...
        n_bins, 0);
    % trial number
    [RT_bins.GLP.trialN.perSub(:,iS),...
        trialN_bins.GLP.conf.perSub(:,iS)] = do_bin2(yRT_GLP,...
        trialN.GLP.perSub(:,iS),...
        n_bins, 0);
    [fit_RT_bins.GLP.trialN.perSub(:,iS),...
        trialN_bins.GLP.trialN.perSub(:,iS)] = do_bin2(RTfit_GLP_tmp,...
        trialN.GLP.perSub(:,iS),...
        n_bins, 0);
    [conf_bins.GLP.trialN.perSub(:,iS)] = do_bin2(Conf.GLP.perSub(:, iS),...
        trialN.GLP.perSub(:,iS),...
        n_bins, 0);

end % subject loop

%% average across subjects and test significant betas
% gain & loss pair betas
for iB = 1:length(RT_GorL_var_nm)
    reg_nm = RT_GorL_var_nm{iB};

    % mean, sem, sd
    [m_beta.GP.(reg_nm),...
        sem_beta.GP.(reg_nm),...
        sd_beta.GP.(reg_nm)] = mean_sem_sd(beta.GP.(reg_nm),2);
    [m_beta.LP.(reg_nm),...
        sem_beta.LP.(reg_nm),...
        sd_beta.LP.(reg_nm)] = mean_sem_sd(beta.LP.(reg_nm),2);

    % test significant
    [~,pval.GP.(reg_nm)] = ttest(beta.GP.(reg_nm));
    [~,pval.LP.(reg_nm)] = ttest(beta.LP.(reg_nm));
end % beta loop

% neutral
for iB = 1:length(RT_NP_var_nm)
    reg_nm = RT_NP_var_nm{iB};
    % mean, sem, sd
    [m_beta.NP.(reg_nm),...
        sem_beta.NP.(reg_nm),...
        sd_beta.NP.(reg_nm)] = mean_sem_sd(beta.NP.(reg_nm),2);

    % test significant
    [~,pval.NP.(reg_nm)] = ttest(beta.NP.(reg_nm));
end % beta loop

% gain+loss
for iB = 1:length(RT_GandL_var_nm)
    reg_nm = RT_GandL_var_nm{iB};
    % mean, sem, sd
    [m_beta.GLP.DT.(reg_nm),...
        sem_beta.GLP.DT.(reg_nm),...
        sd_beta.GLP.DT.(reg_nm)] = mean_sem_sd(beta.GLP.DT.(reg_nm),2);

    % test significant
    [~,pval.GLP.DT.(reg_nm)] = ttest(beta.GLP.DT.(reg_nm));

    % mean, sem, sd
    [m_beta.GLP.Val.(reg_nm),...
        sem_beta.GLP.Val.(reg_nm),...
        sd_beta.GLP.Val.(reg_nm)] = mean_sem_sd(beta.GLP.Val.(reg_nm),2);

    % test significant
    [~,pval.GLP.Val.(reg_nm)] = ttest(beta.GLP.Val.(reg_nm));

    % mean, sem, sd
    [m_beta.GLP.Conf.(reg_nm),...
        sem_beta.GLP.Conf.(reg_nm),...
        sd_beta.GLP.Conf.(reg_nm)] = mean_sem_sd(beta.GLP.Conf.(reg_nm),2);

    % test significant
    [~,pval.GLP.Conf.(reg_nm)] = ttest(beta.GLP.Conf.(reg_nm));
end % beta loop

%% average bins
% Mean and sem
for iM_SEM = 1:2
    switch iM_SEM
        case 1
            mean_sem_field = 'm_aSubs';
            mean_sem_fn = @nanmean;
        case 2
            mean_sem_field = 'sem_aSubs';
            mean_sem_fn = @sem;
    end

    % gain pair
    RT_bins.GP.SV.(mean_sem_field) = mean_sem_fn(RT_bins.GP.SV.perSub, 2);
    fit_RT_bins.GP.SV.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GP.SV.perSub, 2);
    SV_bins.GP.SV.(mean_sem_field) = mean_sem_fn(SV_bins.GP.SV.perSub, 2);
    % confidence
    RT_bins.GP.conf.(mean_sem_field) = mean_sem_fn(RT_bins.GP.conf.perSub, 2);
    fit_RT_bins.GP.conf.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GP.conf.perSub, 2);
    conf_bins.GP.conf.(mean_sem_field) = mean_sem_fn(conf_bins.GP.conf.perSub, 2);
    % p(choice=left)
    RT_bins.GP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(RT_bins.GP.pChoiceLeft.perSub, 2);
    fit_RT_bins.GP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GP.pChoiceLeft.perSub, 2);
    pChoiceLeft_centered_bins.GP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(pChoiceLeft_centered_bins.GP.pChoiceLeft.perSub, 2);
    % dQ
    RT_bins.GP.dQ_LR.(mean_sem_field) = mean_sem_fn(RT_bins.GP.dQ_LR.perSub, 2);
    fit_RT_bins.GP.dQ_LR.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GP.dQ_LR.perSub, 2);
    conf_bins.GP.dQ_LR.(mean_sem_field) = mean_sem_fn(conf_bins.GP.dQ_LR.perSub, 2);
    dQ_LR_bins.GP.dQ_LR.(mean_sem_field) = mean_sem_fn(dQ_LR_bins.GP.dQ_LR.perSub, 2);
    % trial number
    RT_bins.GP.trialN.(mean_sem_field) = mean_sem_fn(RT_bins.GP.trialN.perSub, 2);
    fit_RT_bins.GP.trialN.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GP.trialN.perSub, 2);
    conf_bins.GP.trialN.(mean_sem_field) = mean_sem_fn(conf_bins.GP.trialN.perSub, 2);
    trialN_bins.GP.trialN.(mean_sem_field) = mean_sem_fn(trialN_bins.GP.trialN.perSub, 2);

    % loss pair
    % SV
    RT_bins.LP.SV.(mean_sem_field) = mean_sem_fn(RT_bins.LP.SV.perSub, 2);
    fit_RT_bins.LP.SV.(mean_sem_field) = mean_sem_fn(fit_RT_bins.LP.SV.perSub, 2);
    SV_bins.LP.SV.(mean_sem_field) = mean_sem_fn(SV_bins.LP.SV.perSub, 2);
    % confidence
    RT_bins.LP.conf.(mean_sem_field) = mean_sem_fn(RT_bins.LP.conf.perSub, 2);
    fit_RT_bins.LP.conf.(mean_sem_field) = mean_sem_fn(fit_RT_bins.LP.conf.perSub, 2);
    conf_bins.LP.conf.(mean_sem_field) = mean_sem_fn(conf_bins.LP.conf.perSub, 2);
    % p(choice=left)
    RT_bins.LP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(RT_bins.LP.pChoiceLeft.perSub, 2);
    fit_RT_bins.LP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(fit_RT_bins.LP.pChoiceLeft.perSub, 2);
    pChoiceLeft_centered_bins.LP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(pChoiceLeft_centered_bins.LP.pChoiceLeft.perSub, 2);
    % dQ
    RT_bins.LP.dQ_LR.(mean_sem_field) = mean_sem_fn(RT_bins.LP.dQ_LR.perSub, 2);
    fit_RT_bins.LP.dQ_LR.(mean_sem_field) = mean_sem_fn(fit_RT_bins.LP.dQ_LR.perSub, 2);
    conf_bins.LP.dQ_LR.(mean_sem_field) = mean_sem_fn(conf_bins.LP.dQ_LR.perSub, 2);
    dQ_LR_bins.LP.dQ_LR.(mean_sem_field) = mean_sem_fn(dQ_LR_bins.LP.dQ_LR.perSub, 2);
    % trial number
    RT_bins.LP.trialN.(mean_sem_field) = mean_sem_fn(RT_bins.LP.trialN.perSub, 2);
    fit_RT_bins.LP.trialN.(mean_sem_field) = mean_sem_fn(fit_RT_bins.LP.trialN.perSub, 2);
    conf_bins.LP.trialN.(mean_sem_field) = mean_sem_fn(conf_bins.LP.trialN.perSub, 2);
    trialN_bins.LP.trialN.(mean_sem_field) = mean_sem_fn(trialN_bins.LP.trialN.perSub, 2);

    % gain+loss pair
    % SV
    RT_bins.GLP.SV.(mean_sem_field) = mean_sem_fn(RT_bins.GLP.SV.perSub, 2);
    fit_RT_bins.GLP.SV.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GLP.SV.perSub, 2);
    SV_bins.GLP.SV.(mean_sem_field) = mean_sem_fn(SV_bins.GLP.SV.perSub, 2);
    % confidence
    RT_bins.GLP.conf.(mean_sem_field) = mean_sem_fn(RT_bins.GLP.conf.perSub, 2);
    fit_RT_bins.GLP.conf.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GLP.conf.perSub, 2);
    conf_bins.GLP.conf.(mean_sem_field) = mean_sem_fn(conf_bins.GLP.conf.perSub, 2);
    % p(choice=left)
    RT_bins.GLP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(RT_bins.GLP.pChoiceLeft.perSub, 2);
    fit_RT_bins.GLP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GLP.pChoiceLeft.perSub, 2);
    pChoiceLeft_centered_bins.GLP.pChoiceLeft.(mean_sem_field) = mean_sem_fn(pChoiceLeft_centered_bins.GLP.pChoiceLeft.perSub, 2);
    % dQ
    RT_bins.GLP.dQ_LR.(mean_sem_field) = mean_sem_fn(RT_bins.GLP.dQ_LR.perSub, 2);
    fit_RT_bins.GLP.dQ_LR.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GLP.dQ_LR.perSub, 2);
    conf_bins.GLP.dQ_LR.(mean_sem_field) = mean_sem_fn(conf_bins.GLP.dQ_LR.perSub, 2);
    dQ_LR_bins.GLP.dQ_LR.(mean_sem_field) = mean_sem_fn(dQ_LR_bins.GLP.dQ_LR.perSub, 2);
    % trial number
    RT_bins.GLP.trialN.(mean_sem_field) = mean_sem_fn(RT_bins.GLP.trialN.perSub, 2);
    fit_RT_bins.GLP.trialN.(mean_sem_field) = mean_sem_fn(fit_RT_bins.GLP.trialN.perSub, 2);
    conf_bins.GLP.trialN.(mean_sem_field) = mean_sem_fn(conf_bins.GLP.trialN.perSub, 2);
    trialN_bins.GLP.trialN.(mean_sem_field) = mean_sem_fn(trialN_bins.GLP.trialN.perSub, 2);
end

%% graph
figDisp = 1;
if figDisp == 1
    pSize = 50;
    lSize = 3;

    %% loop through pairs
    pair_types = {'GP','LP','GLP'};
    n_pairs = length(pair_types);
    for iPair = 3:n_pairs
        pair_nm = pair_types{iPair};
        switch pair_nm
            case 'GP'
                pair_fullnm = 'gainPair';
            case 'LP'
                pair_fullnm = 'lossPair';
            case 'GLP'
                pair_fullnm = 'GL_Pairs';
        end

        %% SV bins
        fig_hdl = fig();
        errorbar(SV_bins.(pair_nm).SV.m_aSubs,...
            RT_bins.(pair_nm).SV.m_aSubs,...
            RT_bins.(pair_nm).SV.sem_aSubs,...
            'k *',...
            'LineWidth',lSize);
        hold on;
        plot(SV_bins.(pair_nm).SV.m_aSubs,...
            fit_RT_bins.(pair_nm).SV.m_aSubs,...
            'k--',...
            'LineWidth',lSize);
        % add reference to split loss and gains
        line([0 0], [0.7 1.4],...
            'LineStyle','-','LineWidth',3,'MarkerEdgeColor','k','Color','k');
        %         xlabel('stimulus value');
        xlabel('Val');
        %     xlabel('valeur du stimulus');
        ylabel('DT (s)');
        legend_size(pSize);
        if strcmp(pair_nm,'GLP')
            switch SV_formula
                case 'qAqB'
                    xlim([-1 1]);
                case 'pAqApBqB'
                    xlim([-0.35 0.65]);
            end
            ylim_vals = [0.75 1.3];
            %         line([0 0],ylim_vals,...
            %             'LineStyle','-','LineWidth',lSize,'Color','k'); % line at SV = 0
            ylim(ylim_vals);
        end
        img_nm = ['MS2_RL_RT_f_SV_',pair_fullnm,'_',num2str(n_bins),'bins_',num2str(NS),'subs.png'];
        save_fig(fig_hdl, saveFolder, img_nm,1);

        %% conf bins
        fig_hdl = fig();
        errorbar(conf_bins.(pair_nm).conf.m_aSubs,...
            RT_bins.(pair_nm).conf.m_aSubs,...
            RT_bins.(pair_nm).conf.sem_aSubs,...
            'k *',...
            'LineWidth',lSize);
        hold on;
        plot(conf_bins.(pair_nm).conf.m_aSubs,...
            fit_RT_bins.(pair_nm).conf.m_aSubs,...
            'k--',...
            'LineWidth',lSize);
        xlim([0 1]);
        ylim([0.75 1.3]);
        %     xlabel('confiance');
        xlabel('Conf');
        ylabel('DT (s)');
        legend_size(pSize);
        img_nm = ['MS2_RL_RT_f_conf_',pair_fullnm,'_',num2str(n_bins),'bins_',num2str(NS),'subs.png'];
        save_fig(fig_hdl, saveFolder, img_nm,1);

        %% p(choice=left) centered bins
        fig_hdl = fig();
        errorbar(pChoiceLeft_centered_bins.(pair_nm).pChoiceLeft.m_aSubs,...
            RT_bins.(pair_nm).pChoiceLeft.m_aSubs,...
            RT_bins.(pair_nm).pChoiceLeft.sem_aSubs,...
            'k *',...
            'LineWidth',lSize);
        hold on;
        plot(pChoiceLeft_centered_bins.(pair_nm).pChoiceLeft.m_aSubs,...
            fit_RT_bins.(pair_nm).pChoiceLeft.m_aSubs,...
            'k--',...
            'LineWidth',lSize);
        %     xlabel('p(gauche)');
        xlabel('p(left)');
        ylabel('DT (s)');
        legend_size(pSize);
        if strcmp(pair_nm,'GLP')
            ylim_vals = [0.9 1.2];
        else
            ylim_vals = ylim();
        end
        ylim(ylim_vals);
        img_nm = ['MS2_RL_RT_f_pChoiceLeft_',pair_fullnm,'_',num2str(n_bins),'bins_',num2str(NS),'subs.png'];
        save_fig(fig_hdl, saveFolder, img_nm,1);

        %% dQ bins
        fig_hdl = fig();
        left_color = [0 0 0];
        right_color = [0 0 1];
        set(fig_hdl,'defaultAxesColorOrder',[left_color; right_color]);
        yyaxis left;
        errorbar(dQ_LR_bins.(pair_nm).dQ_LR.m_aSubs,...
            RT_bins.(pair_nm).dQ_LR.m_aSubs,...
            RT_bins.(pair_nm).dQ_LR.sem_aSubs,...
            'k *',...
            'LineWidth',lSize);
        hold on;
        plot(dQ_LR_bins.(pair_nm).dQ_LR.m_aSubs,...
            fit_RT_bins.(pair_nm).dQ_LR.m_aSubs,...
            'k--',...
            'LineWidth',lSize);
        %     xlabel('Q_g_a_u_c_h_e - Q_d_r_o_i_t_e');
        xlabel('ΔV');
        ylabel('DT (s)');
        legend_size(pSize);
        if strcmp(pair_nm,'GLP')
            ylim_vals = [0.9 1.22];
        else
            ylim_vals = ylim();
        end
        line([0 0],ylim_vals,...
            'LineStyle','-','LineWidth',lSize,'Color','k'); % line at dQ = 0
        ylim(ylim_vals);

        yyaxis right;
        %     errorbar(dQ_LR_bins.(pair_nm).dQ_LR.m_aSubs,...
        %         conf_bins.(pair_nm).dQ_LR.m_aSubs,...
        %         conf_bins.(pair_nm).dQ_LR.sem_aSubs,...
        %         'b *',...
        %         'LineWidth',lSize);
        jbfill(dQ_LR_bins.(pair_nm).dQ_LR.m_aSubs',...
            conf_bins.(pair_nm).dQ_LR.m_aSubs'+conf_bins.(pair_nm).dQ_LR.sem_aSubs',...
            conf_bins.(pair_nm).dQ_LR.m_aSubs'-conf_bins.(pair_nm).dQ_LR.sem_aSubs',...
            conf_bins.(pair_nm).dQ_LR.m_aSubs',...
            'b');
        ylabel('Conf');
        legend_size(pSize);
        ylim_vals = [0 1];
        ylim(ylim_vals);

        img_nm = ['MS2_RL_RT_and_Conf_f_dQ_left_right_',pair_fullnm,'_',num2str(n_bins),'bins_',num2str(NS),'subs.png'];
        save_fig(fig_hdl, saveFolder, img_nm,1);

        %% trial number bins
        fig_hdl = fig();
        left_color = [0 0 0];
        right_color = [0 0 1];
        set(fig_hdl,'defaultAxesColorOrder',[left_color; right_color]);
        yyaxis left;
        errorbar(trialN_bins.(pair_nm).trialN.m_aSubs,...
            RT_bins.(pair_nm).trialN.m_aSubs,...
            RT_bins.(pair_nm).trialN.sem_aSubs,...
            'k *',...
            'LineWidth',lSize);
        hold on;
        plot(trialN_bins.(pair_nm).trialN.m_aSubs,...
            fit_RT_bins.(pair_nm).trialN.m_aSubs,...
            'k--',...
            'LineWidth',lSize);
        xlabel('Trial');
        ylabel('DT (s)');
        legend_size(pSize);
        if strcmp(pair_nm,'GLP')
            ylim_vals = [0.9 1.22];
        else
            ylim_vals = ylim();
        end
        line([0 0],ylim_vals,...
            'LineStyle','-','LineWidth',lSize,'Color','k'); % line at dQ = 0
        ylim(ylim_vals);

        yyaxis right;
        %     errorbar(trialN_bins.(pair_nm).trialN.m_aSubs,...
        %         conf_bins.(pair_nm).trialN.m_aSubs,...
        %         conf_bins.(pair_nm).trialN.sem_aSubs,...
        %         'b *',...
        %         'LineWidth',lSize);
        jbfill(trialN_bins.(pair_nm).trialN.m_aSubs',...
            conf_bins.(pair_nm).trialN.m_aSubs'+conf_bins.(pair_nm).trialN.sem_aSubs',...
            conf_bins.(pair_nm).trialN.m_aSubs'-conf_bins.(pair_nm).trialN.sem_aSubs',...
            conf_bins.(pair_nm).trialN.m_aSubs',...
            'b');
        ylabel('Conf');
        legend_size(pSize);
        ylim_vals = [0 1];
        ylim(ylim_vals);

        img_nm = ['MS2_RL_RT_and_Conf_f_trialN_',pair_fullnm,'_',num2str(n_bins),'bins_',num2str(NS),'subs.png'];
        save_fig(fig_hdl, saveFolder, img_nm,1);

    end % pair type
end

end % function